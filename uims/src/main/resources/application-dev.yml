server:
  port: 8889
  servlet:
    context-path: /uims

#localhost:8888/uims/v3/api-docs

spring:
  application:
    name: uims
  jackson:
    time-zone: GMT+8
  datasource:
    dynamic:
      primary: master #设置默认的数据源或者数据源组,默认值即为master
      strict: true #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源
      datasource:
        master:
          url: jdbc:mysql://${MYSQL_SERVER_IP:localhost}:3306/dev-test?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&autoReconnect=true
          username: ${MYSQL_USERNAME:root}
          password: ${MYSQL_PASSWORD:123456}
          driver-class-name: com.mysql.cj.jdbc.Driver
        slave_1:
          url: jdbc:mysql://${MYSQL_SERVER_IP:localhost}:3306/dev-test2?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&autoReconnect=true
          username: ${MYSQL_USERNAME:root}
          password: ${MYSQL_PASSWORD:123456}
          driver-class-name: com.mysql.cj.jdbc.Driver
    # 连接池设置
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      # 最大连接池数量
      maximum-pool-size: 30
      # 最小空闲线程数量
      minimum-idle: 5
      # 配置获取连接等待超时的时间
      connectionTimeout: 30000
      # 校验超时时间
      validationTimeout: 5000
      # 空闲连接存活最大时间，默认10分钟
      idleTimeout: 600000
      # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认30分钟
      maxLifetime: 1800000
      # 连接测试query（配置检测连接是否有效）
      connectionTestQuery: SELECT 1
      # 多久检查一次连接的活性
      keepaliveTime: 30000
  jpa:
    #    database-platform: org.hibernate.dialect.MySQLDialect
    show-sql: true
    open-in-view: false
    properties:
      "hibernate.format_sql": true
    hibernate:
      ddl-auto: update
  mvc:
    path-match:
      matching-strategy: ant_path_matcher
  data:
    redis:
      # 地址
      host: ${REDIS_SERVER_IP:localhost}
      # 端口，默认为6379
      port: 6379
      # 数据库索引
      database: 0
      # 密码(如没有密码请注释掉)
      # password:
      # 连接超时时间
      timeout: 10s
      # 是否开启ssl
      ssl: false
  quartz:
    # 任务存储类型
    job-store-type: jdbc
    # 关闭时等待任务完成
    wait-for-jobs-to-complete-on-shutdown: true
    # 是否覆盖已有的任务
    overwrite-existing-jobs: true
    # 是否自动启动计划程序
    auto-startup: false
    # 延迟启动
    startup-delay: 10s
    jdbc:
      # 数据库架构初始化模式（never：从不进行初始化；always：每次都清空数据库进行初始化；embedded：只初始化内存数据库（默认值））
      # 注意：第一次启动后，需要将always改为never，否则后续每次启动都会重新初始化quartz数据库
      initialize-schema: always
      # 用于初始化数据库架构的SQL文件的路径
      # schema: classpath:sql/tables_mysql_innodb.sql
    # 相关属性配置
    properties:
      org:
        quartz:
          scheduler:
            # 调度器实例名称
            instanceName: UimsScheduler
            # 分布式节点ID自动生成
            instanceId: AUTO
          jobStore:
            class: org.springframework.scheduling.quartz.LocalDataSourceJobStore
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            # 表前缀
            tablePrefix: QRTZ_
            # 是否开启集群
            isClustered: true
            # 数据源别名（自定义）
            dataSource: quartz
            # 分布式节点有效性检查时间间隔（毫秒）
            clusterCheckinInterval: 10000
            useProperties: false
          # 线程池配置
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true

# 日志配置
logging:
  level:
    "ROOT": info
    "org.hibernate.type.descriptor.sql.BasicBinder": TRACE

sugarcoat:
  cache:
    # redis key前缀
    keyPrefix: uims
    # 线程池数量
    threads: 4
    # Netty线程池数量
    nettyThreads: 8
    # 单节点配置
    singleServerConfig:
      # 客户端名称
      clientName: ${spring.application.name}
      # 最小空闲连接数
      connectionMinimumIdleSize: 8
      # 连接池大小
      connectionPoolSize: 32
      # 连接空闲超时，单位：毫秒
      idleConnectionTimeout: 10000
      # 命令等待超时，单位：毫秒
      timeout: 3000
      # 发布和订阅连接池大小
      subscriptionConnectionPoolSize: 50
  # redis 单机配置(单机与集群只能开启一个另一个需要注释掉)
  doc:
    enable: true
    title: 用户界面管理系统
    description: 用户界面管理系统
    version: V1.0
    url: http://localhost:${server.port}${server.servlet.context-path}
    email: sugarcoatx@qq.com
    license: MIT
    license-url: https://mit-license.org/
  dictionary:
    enable: true
    scanPackage: com.sugarcoat.uims
    registerStrategy: OVERRIDE
    enableCache: true
    cachePrefix: 'sugarcoat:dict:'
  param:
    enable: true
    enableRegister: true
    scanPackage: com.sugarcoat.uims
    enableCache: true
    cachePrefix: 'sugarcoat:param:'
  email:
    enable: false
    host: "smtp.qq.com"
    port: 465
    username: ${EMAIL_USERNAME}
    password: ${EMAIL_PASSWORD}
  sms:
    enable: false
    type: aliyun
  #    type: tencent
  oss:
    enable: false
    bucketName: x
    endPoint: x
    accessKey: x
    secretKey: x
  server:
    enable: true





